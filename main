#include <iostream>
#include <string>
#include <cstdlib> // For the "system" function
#include <unistd.h> // For the "unlink" function on Unix-based systems 

#ifdef _WIN32 // For Windows 
#include <windows.h> // For the color-changing functions on Windows
#else // For Unix-based systems
#define RESET_COLOR "\033[0m"
#define BLACK_TEXT "\033[30m"
#define WHITE_TEXT "\033[37m"
#endif

using namespace std;

void clear_screen() {
#ifdef _WIN32 // For Windows 
    system("cls");
#else // For Unix-based systems
    system("clear");
#endif
}

void change_text_color(string color) {
#ifdef _WIN32 // For Windows
    if (color == "bw") {
        HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
        SetConsoleTextAttribute(hConsole, 15); // set foreground color to white and background color to black
    } else if (color == "wb") {
        HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
        SetConsoleTextAttribute(hConsole, 240); // set foreground color to black and background color to white
    } else {
        cout << "Invalid color code specified. Please use 'bw' or 'wb'." << endl;
    }
#else // For Unix-based systems
    if (color == "bw") {
        cout << WHITE_TEXT;
    } else if (color == "wb") {
        cout << BLACK_TEXT;
    } else {
        cout << "Invalid color code specified. Please use 'bw' or 'wb'." << endl;
    }
#endif
}

int main() {
    string input;

    while (true) {
        // Prompt user for input
        cout << ">> ";
        getline(cin, input);

        // Clear the terminal screen
        if (input == "clear") {
            clear_screen();
        }
        // Check for "help" command
        else if (input == "help") {
            // Display list of available commands and their functions
            cout << "Available commands:\n";
            cout << "  clear - clears the terminal screen\n";
            cout << "  help - displays this help message\n";
            cout << "  systeminfo - displays information about the system\n";
            cout << "  delete <file> - deletes the specified file\n";
            cout << "  cd <directory> - changes the current working directory\n";
            cout << "  color [bw|wb] - changes the console color to black on white or white on black\n";
            cout << "  run <program> - runs the specified program\n";
        }
        // Check for "systeminfo" command
        else if (input == "systeminfo") {
            // Execute shell command to display system information
            system("uname -a");
        }
        // Check for "delete" command
        else if (input.find("delete") == 0) {
            // Get the file name to delete
            string filename = input.substr(7); // Remove "delete " from the input string
            // Use the unlink function to delete the file on Unix-based systems
            if (unlink(filename.c_str()) != 0) {
                perror("Error deleting file");
            } else {
                cout << "File deleted successfully" << endl;
            }
        }
        // Check for "cd" command
        else if (input.find("cd") == 0) {
            // Get the directory name to change to
            string directory = input.substr(3); // Remove "cd " from the input string
            
            
           
// Use the chdir function to change the current working directory
if (chdir(directory.c_str()) != 0) {
perror("Error changing directory");
} else {
cout << "Current directory changed to " << directory << endl;
}
}
// Check for "color" command
else if (input.find("color") == 0) {
// Get the color code to change to
string color = input.substr(6); // Remove "color " from the input string
change_text_color(color);
}
// Check for "run" command
else if (input.find("run") == 0) {
// Get the program name to run
string program = input.substr(4); // Remove "run " from the input string
// Use the system function to run the program
system(program.c_str());
}
// Check for "exit" command
else if (input == "exit") {
break;
}
// Handle unrecognized command
else {
cout << "Unrecognized command. Type 'help' for a list of available commands." << endl;
}
}
return 0;
}
