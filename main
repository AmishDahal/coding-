#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifdef _WIN32
    #include <windows.h>
#else
    #include <unistd.h>
    #include <sys/stat.h>
#endif

const int MAX_INPUT_SIZE = 256;
const int MAX_HISTORY_SIZE = 256;

void displayProcesses() {
    #ifdef _WIN32
        system("tasklist");
    #else
        system("ps -ef");
    #endif
}

void clearScreen() {
    #ifdef _WIN32
        system("cls");
    #else
        system("clear");
    #endif
}


void compressFile(const char* inputFileName, const char* outputFileName) {
    FILE *inputFile = fopen(inputFileName, "r");
    if (inputFile == NULL) {
        printf("Unable to open file %s for reading.\n", inputFileName);
        return;
    }

    FILE *outputFile = fopen(outputFileName, "wb");
    if (outputFile == NULL) {
        printf("Unable to create file %s for writing.\n", outputFileName);
        fclose(inputFile);
        return;
    }

    char input[MAX_INPUT_SIZE];
    fread(input, sizeof(char), MAX_INPUT_SIZE, inputFile);

    int len = strlen(input);
    char output[MAX_INPUT_SIZE * 2]; // Allocate space for compressed string

    int count = 1;
    int index = 0;

    for (int i = 0; i < len; i++) {
        output[index++] = input[i]; // Store the character

        while (i + 1 < len && input[i] == input[i + 1]) {
            count++;
            i++;
        }

        // Store the count of consecutive characters
        if (count > 1) {
            int temp = sprintf(output + index, "%d", count);
            index += temp;
            count = 1;
        }
    }
    output[index] = '\0'; // Terminate the string

    fwrite(output, sizeof(char), strlen(output), outputFile);

    fclose(inputFile);
    fclose(outputFile);

    printf("File compressed successfully to %s\n", outputFileName);
}

void setColor(const char* color) {
    // Check if the terminal supports ANSI escape sequences
    const char* term = getenv("TERM");
    if (term == NULL || strcmp(term, "dumb") == 0) {
        // ANSI escape sequences are not supported
        return;
    }

    // Define ANSI escape sequences for different colors
    const char* RESET = "\033[0m";
    const char* COLORS[] = {
        "\033[30m", "\033[31m", "\033[32m", "\033[33m", 
        "\033[34m", "\033[35m", "\033[36m", "\033[37m"
    };
    const char* colorNames[] = { "black", "red", "green", "yellow", "blue", "magenta", "cyan", "white" };

    // Find and set the console color based on the specified color name
    for (int i = 0; i < 8; i++) {
        if (strcmp(color, colorNames[i]) == 0) {
            printf("%s", COLORS[i]);
            return;
        }
    }

    // Invalid color name
    printf("Invalid color: %s\n", color);
}

void printHelp() {
    printf("Available commands:\n");
    printf("  clear - clears the terminal screen\n");
    printf("  help - displays this help message\n");
    printf("  systeminfo - displays information about the system\n");
    printf("  delete <file> - deletes the specified file\n");
    printf("  cd <directory> - changes the current working directory\n");
    printf("  color <color> - changes the console color\n");
    printf("  run <program> - runs the specified program\n");
    printf("  history - displays a list of previously entered commands\n");
    printf("  tasklist - displays the task being performed\n");
    printf("  mkdir <directory> - creates a new directory\n");
}

void deleteFile(const char* filePath) {
    remove(filePath);
}

void changeDirectory(const char* dirPath) {
    #ifdef _WIN32
        SetCurrentDirectory(dirPath);
    #else
        chdir(dirPath);
    #endif
}

void createDirectory(const char* dirName) {
    #ifdef _WIN32
        CreateDirectory(dirName, NULL);
    #else
        mkdir(dirName, 0777);
    #endif
}

int main() {
    char input[MAX_INPUT_SIZE];
    char history[MAX_HISTORY_SIZE][MAX_INPUT_SIZE];
    int historyIndex = 0;

    while (1) {
        printf(">> ");
        fgets(input, sizeof(input), stdin);
        input[strcspn(input, "\n")] = '\0';

        strcpy(history[historyIndex], input);
        historyIndex++;

        if (strcmp(input, "clear") == 0) {
            clearScreen();
        }
        else if (strcmp(input, "help") == 0) {
            printHelp();
        }
        else if (strcmp(input, "tasklist") == 0) {
            displayProcesses();
        }
        else if (strncmp(input, "delete", 6) == 0) {
            char filePath[MAX_INPUT_SIZE];
            strcpy(filePath, input + 7);
            deleteFile(filePath);
        }
        else if (strncmp(input, "cd", 2) == 0) {
            char dirPath[MAX_INPUT_SIZE];
            strcpy(dirPath, input + 3);
            changeDirectory(dirPath);
        }
        else if (strncmp(input, "color", 5) == 0) {
            const char* color = input + 6;
            setColor(color);
        }
        else if (strncmp(input, "run", 3) == 0) {
            const char* program = input + 4;
            system(program);
        }
        else if (strcmp(input, "history") == 0) {
            printf("Command History:\n");
            for (int i = 0; i < historyIndex; i++) {
                printf(" %s\n", history[i]);
            }
        }
        else if (strncmp(input, "mkdir", 5) == 0) {
            const char* dirName = input + 6;
            createDirectory(dirName);
        }

 else if (strncmp(input, "compress", 8) == 0) {
        char inputFile[MAX_INPUT_SIZE], outputFile[MAX_INPUT_SIZE];
        if (sscanf(input, "compress %s to %s", inputFile, outputFile) != 2) {
            printf("Invalid syntax. Usage: compress <input_file> to <output_file>\n");
        } else {
            compressFile(inputFile, outputFile);
        }
    }
        else {
            printf("Invalid command. Type 'help' to see available commands.\n");
        }
    }

    return 0;
}
