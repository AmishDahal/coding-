#include <iostream>
#include <string>
#include <cstdlib> // For the "system" function
#include <windows.h> // For the color-changing functions on Windows

using namespace std;

int main() {
  string input;

  while (true) {
    // Prompt user for input
    cout << ">> ";
    getline(cin, input);

    // Check for "clear" command
    if (input == "clear") {
      // Clear the terminal screen
      system("cls");
    }
    // Check for "help" command
    else if (input == "help") {
      // Display list of available commands and their functions
      cout << "Available commands:\n";
      cout << "  clear - clears the terminal screen\n";
      cout << "  help - displays this help message\n";
      cout << "  systeminfo - displays information about the system\n";
      cout << "  delete <file> - deletes the specified file\n";
      cout << "  cd <directory> - changes the current working directory\n";
      cout << "  run <program> - runs the specified program\n";
    }
    // Check for "systeminfo" command
    else if (input == "systeminfo") {
      // Execute shell command to display system information
      system("systeminfo");
    }
    // Check for "delete" command
    else if (input.find("delete") == 0) {
      // Get the file name to delete
      string filename = input.substr(7); // Remove "delete " from the input string
      // Use the "unlink" function to delete the file on Unix-based systems
      int result = unlink(filename.c_str());
      if (result != 0) {
        cout << "Error deleting file: " << strerror(errno) << endl;
      } else {
        cout << "File deleted successfully" << endl;
      }
    }
    // Check for "cd" command
    else if (input.find("cd") == 0) {
      // Get the directory to change to
      string directory = input.substr(3); // Remove "cd " from the input string
      // Use the "SetCurrentDirectory" function to change the directory on Windows
      if (SetCurrentDirectory(directory.c_str()) == 0) {
        cout << "Error changing directory: " << GetLastError() << endl;
      }
    }
    // Check for "run" command
    else if (input.find("run") == 0) {
      // Get the program name to run
      string program = input.substr(4); // Remove "run " from the input string
      // Use the "system" function to run the program
      system(program.c_str());
    }
    else {
      // Output response
      HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
      SetConsoleTextAttribute(hConsole, 12); // set color to red
      cout << "I am just a prototype" << endl;
      SetConsoleTextAttribute(hConsole, 15); // reset color to default
    }
  }

  return 0;
}
