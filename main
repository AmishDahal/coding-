#include <iostream>
#include <string>
#include <cstdlib> // For the "system" function
#include <unistd.h> // For the "unlink" function on Unix-based systems
#include <vector> // For the "vector" container

using namespace std;

void setColor(string color) {
    // Check if the terminal supports ANSI escape sequences
    const char* term = getenv("TERM");
    if (term == nullptr || string(term) == "dumb") {
        // ANSI escape sequences are not supported
        return;
    }

    // Define ANSI escape sequences for different colors
    const string RESET = "\033[0m";
    const string BLACK = "\033[30m";
    const string RED = "\033[31m";
    const string GREEN = "\033[32m";
    const string YELLOW = "\033[33m";
    const string BLUE = "\033[34m";
    const string MAGENTA = "\033[35m";
    const string CYAN = "\033[36m";
    const string WHITE = "\033[37m";

    // Set the console color based on the specified color code
    if (color == "black") {
        cout << BLACK;
    } else if (color == "red") {
        cout << RED;
    } else if (color == "green") {
        cout << GREEN;
    } else if (color == "yellow") {
        cout << YELLOW;
    } else if (color == "blue") {
        cout << BLUE;
    } else if (color == "magenta") {
        cout << MAGENTA;
    } else if (color == "cyan") {
        cout << CYAN;
    } else if (color == "white") {
        cout << WHITE;
    } else {
        // Invalid color code
        return;
    }
}

int main() {
    string input;
    vector<string> history;

    while (true) {
        // Prompt user for input
        setColor("green");
        cout << ">> ";
        setColor("white");
        getline(cin, input);

        // Add the input to the history
        history.push_back(input);

        // Check for "clear" command
        if (input == "clear") {
            // Clear the terminal screen
            system("clear");
        }
        // Check for "help" command
        else if (input == "help") {
            // Display list of available commands and their functions
            cout << "Available commands:\n";
            cout << "  clear - clears the terminal screen\n";
            cout << "  help - displays this help message\n";
            cout << "  systeminfo - displays information about the system\n";
            cout << "  delete <file> - deletes the specified file\n";
            cout << "  cd <directory> - changes the current working directory\n";
            cout << "  color <color> - changes the console color\n";
            cout << "  run <program> - runs the specified program\n";
            cout << "  history - displays a list of previously entered commands\n";
        }
        // Check for "systeminfo" command
        else if (input == "systeminfo") {
            // Execute shell command to display system information
            system("uname -a");
        }
        // Check for "delete" command
        else if (input.find("delete") == 0) {
            // Get the file path from the input 
            
                // Delete the file using the unlink function
        int result = unlink(filepath.c_str());
        
        // Check if the file was deleted successfully
        if (result == 0) {
            cout << "File deleted successfully\n";
        } else {
            cout << "Error deleting file\n";
        }
    }
    // Check for "cd" command
    else if (input.find("cd") == 0) {
        // Get the directory path from the input
        string dirpath = input.substr(3);

        // Change the current working directory using the chdir function
        int result = chdir(dirpath.c_str());

        // Check if the directory was changed successfully
        if (result == 0) {
            cout << "Directory changed successfully\n";
        } else {
            cout << "Error changing directory\n";
        }
    }
    // Check for "color" command
    else if (input.find("color") == 0) {
        // Get the color code from the input
        string color = input.substr(6);

        // Change the console color using the setColor function
        setColor(color);
    }
    // Check for "run" command
    else if (input.find("run") == 0) {
        // Get the program name from the input
        string program = input.substr(4);

        // Execute the program using the system function
        system(program.c_str());
    }
    // Check for "history" command
    else if (input == "history") {
        // Display the history of commands
        cout << "Command History:\n";
        for (string cmd : history) {
            cout << "  " << cmd << "\n";
        }
    }
    // Invalid command
    else {
        cout << "Invalid command. Type 'help' for a list of available commands.\n";
    }
}

return 0;
    
