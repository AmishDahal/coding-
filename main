#include <iostream>
#include <string>
#include <cstdlib> // For the "system" function
#include <unistd.h> // For the "unlink" function on Unix-based systems
#include <windows.h> // For the color-changing functions on Windows

using namespace std;

int main() {
  string input;

  while (true) {
    // Prompt user for input
    cout << ">> ";
    getline(cin, input);

    // Check for "clear" command
    if (input == "clear") {
      // Clear the terminal screen
      system("cls");
    }
    // Check for "help" command
    else if (input == "help") {
      // Display list of available commands and their functions
      cout << "Available commands:\n";
      cout << "  clear - clears the terminal screen\n";
      cout << "  help - displays this help message\n";
      cout << "  systeminfo - displays information about the system\n";
      cout << "  delete <file> - deletes the specified file\n";
      cout << "  cd <directory> - changes the current working directory\n";
      cout << "  color [bw|wb] - changes the console color to black on white or white on black\n";
      cout << "  run <program> - runs the specified program\n";
    }
    // Check for "systeminfo" command
    else if (input == "systeminfo") {
      // Execute shell command to display system information
      system("uname -a");
    }
    // Check for "delete" command
    else if (input.find("delete") == 0) {
      // Get the file name to delete
      string filename = input.substr(7); // Remove "delete " from the input string
      // Use the "unlink" function to delete the file on Unix-based systems
      int result = unlink(filename.c_str());
      if (result != 0) {
        cout << "Error deleting file: " << strerror(errno) << endl;
      } else {
        cout << "File deleted successfully" << endl;
      }
    }
    // Check for "cd" command
    else if (input.find("cd") == 0) {
      // Get the directory name to change to
      string directory = input.substr(3); // Remove "cd " from the input string
      // Use the SetCurrentDirectory function to change the current working directory on Windows
      if (SetCurrentDirectory(directory.c_str()) == 0) {
        cout << "Error changing directory: " << GetLastError() << endl;
      }
    }
    // Check for "color" command
    else if (input.find("color") == 0) {
      // Get the color code to set
      string colorCode = input.substr(6); // Remove "color " from the input string
      // Set the console color to black on white if the code is "bw", and to white on black if the code is "wb"
      if (colorCode == "bw") {
        HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
        SetConsoleTextAttribute(hConsole, 15); // set foreground color to white and background color to black
        system("color 0");
      } else if (colorCode == "wb") {
        HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
        SetConsoleTextAttribute(hConsole, 240); // set foreground color to black and background color to white
        system("color F0");
      } else {
        cout << "Invalid color
code specified. Please use 'bw' or 'wb'." << endl;
}
}
// Check for "run" command
else if (input.find("run") == 0) {
// Get the program name to run
string program = input.substr(4); // Remove "run " from the input string
// Use the system function to execute the program
system(program.c_str());
}
// If no valid command is found, display an error message
else {
cout << "Invalid command. Type 'help' for a list of available commands." << endl;
}
}
    // Initialize ncurses
    initscr();

    // Turn off input echoing
    noecho();

    // Enable keypad input
    keypad(stdscr, TRUE);

    // Print a prompt and wait for user input
    printw("Enter a command: ");
    char input[256];
    getnstr(input, sizeof(input));

    // Print the user's input
    printw("You entered: %s\n", input);

    // Clean up ncurses
    endwin();

return 0;
}
